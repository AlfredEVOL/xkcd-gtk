// Code generated by go-bindata.
// sources:
// data/about.ui
// data/properties.ui
// data/viewer.ui
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAboutUi = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xc1\x6e\xd4\x40\x0c\x86\xef\x7d\x0a\xcb\x57\x94\x4c\x76\x2b\x24\x84\x92\x54\xd5\x76\x89\xd0\x96\x82\x60\x41\xdc\xa2\xc9\xc4\x4d\x4c\x92\x99\x30\x33\x69\x9b\x47\xe2\x35\x78\x32\x66\xbb\xbb\x82\x03\x22\xdc\x62\xc7\xff\x67\x8f\xfd\xa7\x57\x4f\x43\x0f\x0f\x64\x1d\x1b\x9d\xe1\x2a\x4e\x10\x48\x2b\x53\xb3\x6e\x32\xfc\xbc\x7f\x13\xbd\xc2\xab\xfc\x22\x65\xed\xc9\xde\x4b\x45\xf9\x05\x40\x6a\xe9\xfb\xc4\x96\x1c\xf4\x5c\x65\xd8\xf8\xee\x05\xfe\x66\x5c\xc6\xab\x35\x8a\xe7\x3a\x53\x7d\x23\xe5\x41\xf5\xd2\xb9\x0c\x0b\xdf\x5d\x57\x66\xf2\x37\x2c\x7b\xd3\x20\x70\x9d\xa1\x3c\x24\xa2\xfa\x98\x39\x68\x82\x6a\xb4\x66\x24\xeb\x67\xd0\x72\xa0\x0c\x1f\xd8\x71\xd5\x13\xe6\x7b\x3b\x51\x2a\xce\x7f\xff\x5e\x1c\x30\x26\x62\x65\x74\x74\x88\x31\x7f\xea\x54\x1d\x85\x01\x97\x74\x21\x6c\xac\x1c\x4e\xaa\xaf\xbb\xcd\x0d\x7c\x61\x7a\x24\xbb\x24\x3c\x3d\x1b\xf3\x24\x5e\x2f\xd5\x2a\x33\x0c\xa4\xbd\xc3\xfc\x1a\x1c\x0f\x63\x4f\xf0\xdc\x29\xe4\x59\x81\x25\x59\x93\x85\x7b\x63\xa1\xb8\x7b\xff\x6e\xbb\x44\x7b\xa4\xca\xb1\x0f\xd3\xb6\xde\x8f\xee\xb5\x10\x0d\xfb\x76\xaa\xe2\x40\x13\xb6\x33\xe4\xc2\xc5\x9c\xf8\xdf\x05\x28\x33\xce\x96\x9b\xd6\x63\xbe\x39\x7f\xc2\xcf\x1f\xb0\x4e\x56\x2f\xe1\xe3\x2c\x35\xec\x4e\xc8\xc5\x13\xb0\x22\xed\x28\xf2\xf3\x18\x86\x2b\xf6\xbb\xf2\xf6\xed\x66\x7b\xf7\x69\x5b\x16\x1f\x6e\xcb\xcb\x32\x59\x02\xc8\xc9\xb7\xc6\x86\x2d\xfd\xa3\x6d\x2a\x8e\xde\x0a\xd6\x14\x7f\x78\xf3\x57\x00\x00\x00\xff\xff\xbd\x99\xc1\xb5\xcf\x02\x00\x00"

func dataAboutUiBytes() ([]byte, error) {
	return bindataRead(
		_dataAboutUi,
		"data/about.ui",
	)
}

func dataAboutUi() (*asset, error) {
	bytes, err := dataAboutUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/about.ui", size: 719, mode: os.FileMode(436), modTime: time.Unix(1472927884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPropertiesUi = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x5d\x6f\x9b\x3c\x14\x80\xef\xfb\x2b\x90\x6f\x5f\x51\xfa\xf1\x76\xdb\x05\xa1\xda\xd6\xae\xaa\x56\x75\xd5\x96\x6d\xda\x55\x65\xe0\x94\x78\x31\x36\xb3\x4d\x93\xfc\xfb\x99\x24\x6d\xb2\xc6\x40\xa8\xa7\x92\x21\x2e\x53\x9f\xc7\xe1\x7c\xf0\x40\x21\xfe\xe9\x34\xa5\xce\x3d\x08\x49\x38\x1b\xa0\xc3\xfd\x03\xe4\x00\x8b\x78\x4c\x58\x32\x40\x5f\x87\x1f\xdc\x37\xe8\x34\xd8\xf3\x09\x53\x20\xee\x70\x04\xc1\x9e\xe3\xf8\x02\x7e\xe5\x44\x80\x74\x28\x09\x07\x28\x51\xe3\xff\xd0\x6a\x8f\xe3\xfd\xc3\x23\xe4\xcd\xe3\x78\xf8\x13\x22\xe5\x44\x14\x4b\x39\x40\x17\x6a\x7c\x46\x30\xe5\x09\x72\x48\x3c\x40\x99\xe0\x19\x08\x45\x40\xba\xf1\xe2\xcf\x05\xa3\xa9\xe5\xc2\xcc\x61\x38\x85\x01\xba\x27\x92\x84\x14\x50\x30\x14\x39\xf8\xde\xc3\xaa\x39\x58\x11\x55\x84\xde\x3c\xee\x5d\x07\xe4\x12\xdc\x11\xe0\x18\x84\x1b\x62\x81\x82\xc3\x3a\x20\x86\x3b\x9c\x53\xa5\x21\x92\x8c\x14\x0a\x4e\x0e\x0e\x36\x90\x68\x44\x68\xec\xcc\x6b\xc6\x30\x75\xe7\x1f\x75\x22\x21\x9f\x2e\x73\x34\xd5\xe6\xdd\xda\x6a\xc3\x2a\x98\x80\x11\x4f\x79\x02\x0c\x78\x2e\xb7\x87\x42\x2e\x8a\x4a\x4c\x48\xac\x46\x28\xd8\x48\x6c\x95\xdc\xea\xb3\x29\x95\x2f\x91\xe0\x94\x42\xfc\x9d\xb0\x98\x4f\xd0\x7a\xf0\x33\x32\x33\x66\x27\xe7\x5f\xa1\x5b\xe6\x66\x9c\x92\x68\x86\x82\x8b\xe1\xc7\xdb\x9b\x4f\x57\x97\xef\x7f\xdc\x5e\x9f\x7f\x3b\xff\x5c\xba\xd5\x46\x02\xe6\x24\x2e\x04\x89\xd1\xd3\xb0\x67\x1e\xbe\x09\x4c\xb1\x48\x08\x43\xc1\xd1\xff\x4d\x28\xc1\x27\xae\xcc\x70\xa4\xcf\x4f\x3d\xac\x47\x4d\xd0\x88\xd3\x3c\x65\x2b\xba\xe6\x8b\x8d\x65\x32\x97\xea\x0a\x87\x40\x0d\xb5\xb2\xaa\x97\x09\x9e\x62\x4a\x12\x66\x38\x4b\xeb\xc0\xd9\x12\x34\x8e\x74\x15\x48\x17\xa9\x5d\xe7\x69\x08\xa2\x16\x96\x6a\x46\xc1\xbc\x56\x54\xb4\x28\xd8\x83\x46\x48\xea\x2e\xf6\xf6\x4a\xf6\xf2\x4a\x37\xf3\xbd\x45\x07\x8c\x6b\xba\xbb\x63\xdd\xde\xed\xb2\x53\x3c\xbb\xc5\x4a\xe1\xa8\xec\x6c\xaf\x2c\x0d\xdc\xa9\x6d\x69\xbd\x5a\x76\x5c\xbe\x57\x32\x69\xcd\x27\xf0\xe9\x75\x85\xcd\xbb\xf6\x12\x83\x29\x81\xea\x03\xc2\xd6\x83\xdd\xb8\x09\x73\x55\xeb\x2b\x0c\x16\xb2\xb8\x16\x35\xc6\x05\xce\xb6\x39\xe2\x5d\x1c\xb9\x1a\x09\xbc\xcc\xc8\x75\x59\x7a\xc3\xe2\x66\xaa\xd3\xce\x6b\x5c\xd2\xdd\x77\xde\xf2\x0e\xb8\x57\x5e\x29\xde\xaa\xf2\xec\x26\xae\x57\x5e\x0d\x68\xab\xbc\xcb\x14\x27\xdd\x56\x5e\xe5\xbf\x0c\xc6\xca\xec\xbc\xf2\x48\xd1\xb4\x5e\x79\x15\x78\xab\xca\xb3\x9b\xb8\x5e\x79\x35\xa0\xad\xf2\xde\x52\xe5\x0c\x61\xaa\x3a\x6d\xbd\xe3\xee\x59\x0f\x53\xd5\x3b\xaf\x02\x6f\xd5\x79\x76\xf3\xd6\x3b\xaf\x06\xb4\x75\xde\x19\x56\xdd\xbe\xcb\xab\x7c\xb4\x6b\x2c\xcc\xce\xfb\x2e\xd6\x3d\xeb\x85\x57\x81\xb7\x2a\x3c\xbb\x81\xeb\x85\x57\x03\x5a\xbf\xbf\x80\xc9\xc6\xab\xd0\x0d\xf4\x5f\x16\xde\x49\xf7\x84\xc7\x74\xcf\x7a\xe1\x55\xe0\xad\x0a\xcf\x6e\xe0\x7a\xe1\xd5\x80\xb6\xc2\xbb\x22\x6c\xdc\x69\xe1\xbd\xea\x9e\xf0\xa8\xee\x59\x2f\xbc\x0a\xbc\x55\xe1\xd9\x0d\x5c\x2f\xbc\x1a\xd0\xfa\x65\xad\xc0\x4c\x46\x82\x64\xdd\x7e\x90\xf7\xba\x7b\xda\x53\x8f\x9d\xeb\xe5\x57\x81\xb7\x2a\x3f\xbb\xb1\xfb\xeb\xf2\x33\x27\x69\x08\xde\x0c\x7c\x12\xf4\x67\xc0\xda\xe2\x6a\xc1\xf7\xd6\x7e\xfd\xfb\x3b\x00\x00\xff\xff\x97\x84\x70\x1d\x31\x2c\x00\x00"

func dataPropertiesUiBytes() ([]byte, error) {
	return bindataRead(
		_dataPropertiesUi,
		"data/properties.ui",
	)
}

func dataPropertiesUi() (*asset, error) {
	bytes, err := dataPropertiesUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/properties.ui", size: 11313, mode: os.FileMode(436), modTime: time.Unix(1472927884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataViewerUi = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5d\x53\xdb\x3a\x10\x7d\xbe\xfc\x0a\x8f\x5e\xef\x98\x10\x98\xb9\xc3\x43\x62\xe6\x02\xd3\x8f\xe9\xd0\x61\x0a\x2d\x7d\x95\xe5\x8d\xad\x46\xd6\xba\xb2\x9c\x10\x7e\x7d\x65\x39\x24\x71\xa2\x10\xc7\x09\xb4\x43\x79\x8b\x94\x3d\xd2\xee\xd9\xa3\xf5\x4a\xbd\xb3\xfb\x54\x78\x23\x50\x39\x47\xd9\x27\xdd\xc3\x23\xe2\x81\x64\x18\x71\x19\xf7\xc9\xd7\xdb\x77\xfe\x29\x39\x0b\x0e\x7a\x5c\x6a\x50\x03\xca\x20\x38\xf0\xbc\x9e\x82\x9f\x05\x57\x90\x7b\x82\x87\x7d\x12\xeb\xe1\xbf\x64\xbe\xc6\xc9\x61\xf7\x98\x74\xac\x1d\x86\x3f\x80\x69\x8f\x09\x9a\xe7\x7d\xf2\x5e\x0f\xef\xb8\x8c\x70\x4c\x3c\x1e\xf5\xc9\x88\xc3\x18\x94\x3f\xae\xa6\x4a\x7b\x83\xc8\x14\x66\xa0\xf4\xc4\x93\x34\x85\xd2\x26\xe7\xa1\x00\x12\xdc\xaa\x02\x7a\x9d\xc7\x7f\xdd\xc6\x11\x0c\x68\x21\xb4\x9f\x00\x8f\x13\x4d\x82\xff\x8e\x8e\x9a\x42\xc6\x3c\xd2\x09\x09\x4e\x1d\x08\x96\x70\x11\x79\x7a\x92\x19\x73\xcd\xb5\x80\x90\xaa\xa9\xb7\xae\x08\x3f\x00\x8d\x40\x9d\x1b\x1b\x1b\x64\x62\x87\x33\xfb\x2d\x23\x74\x01\xf2\x04\xc7\x3e\x13\x98\x83\x1f\x16\x5a\xa3\x6c\x0e\xb5\xee\x93\xe0\xfb\xa7\x8b\x4b\xef\x9b\x65\xdf\x89\xb2\x11\xcf\xc7\xae\x28\xcf\xf1\x9e\x2c\x5a\xb4\x88\xcb\x05\x42\xc5\x41\x6a\xaa\x79\x19\x55\x62\x46\x0f\x68\x86\xa2\x29\x3c\xc1\x14\x63\x90\x80\x45\xbe\x61\xdf\x5c\x4f\x04\xd4\xe7\xca\xc0\xcb\xf8\xa6\x6b\x09\x2e\x87\x10\x55\x3a\x5e\x30\xe9\x38\x90\xab\x84\xad\x21\xad\x4a\x97\xd5\x45\xa6\x60\xc4\xad\x9f\x4b\xb0\x96\x4c\x56\x51\xf1\x58\x52\x31\x85\x31\xc1\x59\x19\x81\x97\x50\x19\x09\x50\x7d\x72\x3d\xdd\xf3\x02\x53\xce\x96\x23\x5b\x4f\xcb\x0a\x35\x3c\xa5\xf1\x4c\x7c\xae\x65\x5c\x24\xad\x27\xca\x4d\xd6\xc7\x72\x13\x07\x3b\x3b\x31\xe4\x02\x73\x86\xd2\x2f\x7f\x92\x20\x46\xff\x31\x2f\x7e\x3e\x49\x43\x34\x14\x3e\xbd\x5c\xaf\x53\x39\xee\x22\xc1\xad\x0a\x27\xc0\x69\xdc\x46\x56\x12\xee\xf5\x4b\x4a\xea\xb3\xd9\xef\x4d\x4e\xeb\xe5\x54\xe6\xe3\xb7\x4b\x69\xd5\x70\xc5\xa8\x51\xcd\x5f\xd0\x99\x32\x02\xc0\x74\x2f\x9f\x80\x0d\x0a\xfb\x62\x77\x72\x6a\xac\x41\x15\x7f\x4a\x5b\x3b\xd5\xf2\x75\x7a\x6a\x7f\xd2\xd6\xeb\x28\x85\x88\x53\x3f\x13\x74\x22\x78\x6e\xe4\x94\x14\x83\x81\x80\x06\xb2\x7a\x69\x85\x5c\x81\x2c\x16\x55\x92\x9a\xf1\xac\x49\xd9\x7f\xb7\x50\x98\x16\x28\xc3\x0c\x47\x65\x83\xb5\x0d\x70\x06\xb2\x0e\x4e\x47\x3b\xf4\x0a\xaf\x42\x65\x66\x5e\xfa\x96\x90\x67\x15\x56\xe9\x03\x65\x43\x73\xbd\xd8\x90\x23\x63\xe4\x97\x5d\x37\x09\x40\x46\x6e\x57\xcc\xec\xf2\x52\x7b\xd1\x6d\x0e\x54\xb1\xe4\x8f\x56\xee\xd4\xc5\x37\xed\x5a\xed\x9a\x02\xa9\xfd\x81\xb9\x48\xbe\x26\xed\xd6\xf7\xaf\xfd\x59\xcf\xc1\x2a\xf7\x37\x4c\xa1\x10\x10\xdd\x2d\xde\xad\x5b\x91\xdf\xe4\xf8\x54\x99\xb6\x27\x87\x95\xdf\x69\x9f\x3b\x52\xdf\x78\xe7\x7f\x36\xe5\x3a\x35\xb0\xd4\x24\x5a\xb2\x44\xa1\xe4\x0f\x86\xc3\x0d\x69\xdf\xf8\x79\x5b\x4b\xf5\xe2\x1f\xab\x81\x5f\x4f\x4f\xe3\xfc\x63\x37\x3b\x9f\x2d\x5e\x33\x36\xe4\xb4\x7e\xe5\xde\xf9\x19\xa1\x76\xd5\x36\x2e\x6b\xce\xdc\x17\xed\x65\x60\x4a\x55\xcc\x0d\xa6\xbb\xf2\x54\xd2\x54\x2f\x57\x18\x81\x38\x7f\xb6\xe2\xaa\xed\x1d\xe8\xba\x9a\xe4\x90\xb7\xed\x3c\x6f\x12\x1c\xcf\x57\xa9\xd7\xc6\x3d\x35\x4c\x37\x90\x51\x45\x35\xaa\xe7\xe0\xa1\x4a\x94\x9f\x6b\xaa\x0c\x1f\xdd\xe3\x2d\x71\xa6\x72\xb5\x40\x69\xcc\x48\x70\xb2\x25\x28\x44\xa3\x85\x74\x0b\xdc\x56\xef\x44\xfb\x6a\x6e\x5f\x42\xb5\xff\x87\x58\xe8\xb6\x82\x2d\x5f\x06\xed\x02\x97\x9c\x0a\x8c\xb7\x54\xec\x3e\x6a\x60\xbd\x2b\xf9\x5b\xab\x60\x03\x26\x7b\x9d\x85\x07\xf5\x5f\x01\x00\x00\xff\xff\x71\x22\xd5\xf5\x84\x17\x00\x00"

func dataViewerUiBytes() ([]byte, error) {
	return bindataRead(
		_dataViewerUi,
		"data/viewer.ui",
	)
}

func dataViewerUi() (*asset, error) {
	bytes, err := dataViewerUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/viewer.ui", size: 6020, mode: os.FileMode(436), modTime: time.Unix(1472928094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/about.ui": dataAboutUi,
	"data/properties.ui": dataPropertiesUi,
	"data/viewer.ui": dataViewerUi,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"about.ui": &bintree{dataAboutUi, map[string]*bintree{}},
		"properties.ui": &bintree{dataPropertiesUi, map[string]*bintree{}},
		"viewer.ui": &bintree{dataViewerUi, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

