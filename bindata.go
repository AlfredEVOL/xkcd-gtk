// Code generated by go-bindata.
// sources:
// data/about.ui
// data/transcript.ui
// data/viewer.ui
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAboutUi = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xd1\x6e\xd4\x30\x10\x7c\x6e\xbf\x62\xb5\xaf\x28\x71\xd2\x0a\x09\xa1\x24\x55\x75\x3d\x22\x74\xa5\x20\x38\x10\x6f\x91\xe3\x6c\x93\x25\x89\x1d\x6c\xa7\x6d\x3e\x89\xdf\xe0\xcb\xf0\xd1\x9e\xe0\x01\xd2\x37\xef\x7a\x66\x76\x34\x9a\xec\xe2\x61\x1c\xe0\x8e\xac\x63\xa3\x73\x4c\xe3\x04\x81\xb4\x32\x0d\xeb\x36\xc7\xcf\xfb\x37\xd1\x2b\xbc\x28\x4e\x33\xd6\x9e\xec\xad\x54\x54\x9c\x9e\x64\x96\xbe\xcf\x6c\xc9\xc1\xc0\x75\x8e\xad\xef\x5f\xe0\x1f\x89\xf3\x38\x3d\x43\x71\x80\x99\xfa\x1b\x29\x0f\x6a\x90\xce\xe5\x58\xfa\xfe\xb2\x36\xb3\xbf\x62\x39\x98\x16\x81\x9b\x1c\xe5\x61\x11\x35\x8f\x9b\x40\x39\xc9\x26\x6b\x26\xb2\x7e\x01\x2d\x47\xca\xf1\x8e\x1d\xd7\x03\x61\xb1\xb7\x33\x65\xe2\xf8\xfb\x2f\x68\x18\x5b\x2b\xc7\xe8\x30\x61\xf1\x75\xb7\xb9\x82\x2f\x4c\xf7\x64\xd7\x69\x4f\xbe\xb1\x48\xe2\x74\x1d\xa9\xcc\x38\x92\xf6\x0e\x8b\x4b\x70\x3c\x4e\x03\xc1\xef\x2b\x61\xcf\x0a\x2c\xc9\x86\x2c\xdc\x1a\x0b\xe5\xcd\xfb\x77\xdb\x75\xad\x7b\xaa\x1d\xfb\xe0\xb3\xf3\x7e\x72\xaf\x85\x68\xd9\x77\x73\x1d\x07\x2d\x61\x7b\x43\x2e\xa4\xed\xc4\x43\xaf\x9a\x28\xc4\xfb\x9c\xaf\x69\xb1\xdc\x76\x1e\x8b\xcd\xf1\x09\x3f\x7f\xc0\x59\x92\xbe\x84\x8f\x8b\xd4\xb0\x7b\x12\x5c\xd7\x19\x58\x91\x76\x14\xf9\x65\x0a\xc6\xca\xfd\xae\xba\x7e\xbb\xd9\xde\x7c\xda\x56\xe5\x87\xeb\xea\xbc\x4a\xd6\xe9\x72\xf6\x9d\xb1\x21\x9d\xff\x9f\xcc\xc4\x63\x25\x42\x9f\xc4\x5f\x85\xfa\x15\x00\x00\xff\xff\x09\xdf\x2c\x94\x84\x02\x00\x00"

func dataAboutUiBytes() ([]byte, error) {
	return bindataRead(
		_dataAboutUi,
		"data/about.ui",
	)
}

func dataAboutUi() (*asset, error) {
	bytes, err := dataAboutUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/about.ui", size: 644, mode: os.FileMode(436), modTime: time.Unix(1449748851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTranscriptUi = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\xcf\x8e\x9b\x30\x10\xc6\xcf\xc9\x53\x20\x5f\x2b\x07\xd2\x56\x55\x0f\x40\xa4\xaa\x4a\x1f\xa0\x69\xf7\x6c\xec\x09\xcc\xc6\xd8\xec\xd8\x84\xec\xdb\x2f\x81\xfc\x5d\x50\x14\x6e\xcc\x7c\xdf\xcf\xe3\xf9\x80\x78\x75\x28\x75\xb0\x07\x72\x68\x4d\xc2\x96\x8b\x88\x05\x60\xa4\x55\x68\xf2\x84\xfd\xdb\xac\xf9\x4f\xb6\x4a\xe7\x31\x1a\x0f\xb4\x15\x12\xd2\xf9\x2c\x26\x78\xab\x91\xc0\x05\x1a\xb3\x84\xe5\x7e\xf7\x85\x5d\x8f\xf8\xb6\x58\x7e\x65\xe1\xd1\x66\xb3\x57\x90\x3e\x90\x5a\x38\x97\xb0\x3f\x7e\xf7\x1b\x85\xb6\x39\x0b\x50\x25\xcc\x93\x30\x4e\x12\x56\x9e\xab\xbe\xdd\x22\xb3\xb8\x22\x5b\x01\xf9\xf7\xc0\x88\x12\x12\xb6\x47\x87\x99\x06\x96\x6e\xa8\x86\x38\x3c\xab\x63\x56\x8f\xbe\x37\x9e\xcf\x7d\x6c\xaf\x1d\xf0\x02\x84\x02\xe2\x99\x20\x96\x2e\x1f\xdb\x15\x6c\x45\xad\x7d\x8b\x60\x5e\x78\x96\x7e\x8f\xa2\xe7\x80\x06\x95\x2f\x58\xfa\x63\xe0\x97\x05\x6a\x15\x74\xb9\x1a\xa1\x79\x57\xb6\x0b\x67\xf6\xd0\x25\x31\x12\xdf\xaf\xb3\x34\x25\xa6\xa1\xb9\xb0\xa5\xcd\xc1\x80\xad\xdd\x73\x40\x66\xe9\x18\xd3\x69\x93\x68\x60\xef\xae\xde\x3f\x8f\xdc\xfa\xaf\x24\xab\x35\xa8\x17\x34\xca\x36\xa7\x05\x26\xae\xf0\x69\xc8\xd8\x98\x0d\x1c\xfc\x7f\x84\xe6\xf4\x75\xb5\x15\xdf\x1f\xcb\x0b\x32\x75\xe2\x10\x90\x35\x39\x4b\xfc\xc2\xad\x85\x76\x4f\x81\xa0\xd0\x8b\x69\x48\x43\xa2\xe2\xa5\x55\x2d\xd3\xb4\xf1\x8f\x20\x71\xd8\x67\x70\x49\x28\xbc\x7b\x0f\x77\xea\xad\x76\xab\x5c\xfb\xd7\x6e\x1c\xde\xfc\xeb\x1f\x01\x00\x00\xff\xff\x34\x5d\xdc\xc7\x1f\x04\x00\x00"

func dataTranscriptUiBytes() ([]byte, error) {
	return bindataRead(
		_dataTranscriptUi,
		"data/transcript.ui",
	)
}

func dataTranscriptUi() (*asset, error) {
	bytes, err := dataTranscriptUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/transcript.ui", size: 1055, mode: os.FileMode(436), modTime: time.Unix(1449749798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataViewerUi = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x5a\xdf\x6f\xdb\x36\x10\x7e\x6e\xfe\x0a\x81\xaf\x83\xec\xa4\x05\x86\x3e\xd8\x2a\x96\x06\xcb\x86\x75\x45\xb1\x64\xeb\xde\x06\x8a\x3c\x4b\x9c\x29\x52\xa3\x28\xff\xd8\x5f\x5f\xea\x87\x6d\xd9\x92\x2d\xd1\x56\x1a\xc1\x6f\x91\xf8\x1d\x79\x77\xdf\xe7\xa3\x8e\xcc\xe4\xc3\x2a\xe2\xce\x02\x54\xc2\xa4\x98\xa2\xbb\xd1\x2d\x72\x40\x10\x49\x99\x08\xa6\xe8\xcf\xe7\x9f\xdd\xf7\xe8\x83\x77\x33\x61\x42\x83\x9a\x61\x02\xde\x8d\xe3\x4c\x14\xfc\x97\x32\x05\x89\xc3\x99\x3f\x45\x81\x9e\xff\x80\x76\x73\xbc\x1b\xdd\xbd\x45\x63\xef\xe6\xcd\x44\xfa\xff\x02\xd1\x0e\xe1\x38\x49\xa6\xe8\x51\xcf\xbf\x32\x41\xe5\x12\x39\x8c\x4e\xd1\x82\xc1\x12\x94\xbb\x2c\x5e\x19\xf8\x9b\x49\xac\x64\x0c\x4a\xaf\x1d\x81\x23\xc8\x10\x09\xf3\x39\x20\xef\x59\xa5\x30\x19\x6f\x46\x9b\xa0\x14\x66\x38\xe5\xda\x0d\x81\x05\xa1\x46\xde\x8f\xb7\xb7\xdd\x0c\x96\x8c\xea\x10\x79\xef\x6b\x78\x12\x32\x4e\x1d\xbd\x8e\x0d\x58\x33\xcd\xc1\xc7\x2a\xf7\xb2\x21\xac\x5f\x00\x53\x50\xf7\x06\x90\x47\x16\xe6\x8f\x05\xd8\x26\xa8\x3a\x38\x09\xe5\xd2\x25\x5c\x26\xe0\xfa\xa9\xd6\x52\x74\x33\xcb\xfd\x45\xde\xdf\xbf\x7d\x7c\x70\xfe\xca\xd3\x5c\xb3\xc8\xc3\x2b\xfe\x6e\x08\xe8\x5e\xae\x4a\xf7\x2d\x03\xa8\xc3\xa5\x62\x20\x34\xd6\x2c\x73\x3e\x34\x4f\xff\x4b\xf3\xc8\xdb\x0d\x43\x19\xc9\x00\x04\xc8\x34\x39\xba\x56\xa2\xd7\x1c\x36\x4f\x26\xa8\x2c\x80\xd2\x9c\x33\x31\x07\x9a\xeb\xb0\x18\x1c\xef\x81\xf7\x12\xd0\x98\x82\x22\xdf\x39\xa1\xb1\x82\x05\xcb\xfd\xd8\xe0\x6d\xb3\x92\xf9\xca\x02\x81\x79\x09\x27\x9c\x91\xcc\x3d\x27\xc4\x82\x72\x50\x53\xf4\xa5\x5c\xe3\xa3\x8c\x18\xd9\xb9\x5d\x0b\xf2\x20\x4c\x16\xe1\x60\x2b\x8e\xaa\xd5\xf8\xc0\xec\x20\xe0\xa6\x90\x7f\xcd\xe6\xaa\xc4\x78\x46\x94\x75\x13\x46\xa4\x70\xb3\x3f\x91\x17\x48\x77\x93\x49\x37\x59\x47\xbe\x34\x49\x68\x9c\x64\x32\x2e\x7c\xab\x86\x73\xc0\xd7\x01\xe2\x60\xdc\x8a\x5d\x01\x2b\xfd\x92\xcc\x7e\x36\xf3\x5f\x37\xab\x59\x06\x5f\x96\xd1\xfd\xd1\xbd\xb1\xb6\x52\x56\x61\x5a\x19\x4a\x64\x74\x76\x65\x6b\xe1\xf9\x8f\x7c\xf6\x03\xa6\x4f\x95\xa8\x66\x96\x6d\x0b\xd5\x21\xbf\xf6\xfa\x3d\xce\x6d\x04\x94\x61\x37\xe6\x78\xcd\x59\x62\x28\x0e\xd3\xd9\x8c\xc3\x29\xaa\x5f\x8a\xc6\xdf\x41\xa4\x55\x2a\x23\xf3\xbc\xdd\x13\xfb\xd9\xa9\x52\xb3\xcb\xc6\x32\x96\x8b\x6c\xef\xee\x66\xb2\x85\xe7\xee\x94\x4f\x76\xfb\xd4\xf0\x45\x60\xde\x0b\x37\x0f\xb0\x27\xde\xcd\x62\x98\xcc\xcd\x07\xe6\xd1\xb4\x9a\x61\x37\xfb\xf4\x42\x1e\x08\x5a\x5b\xcd\xbc\xa8\xda\x5f\x22\x23\x0a\x1a\x33\x9e\x0c\x48\x49\x1b\x8f\xae\x54\x4c\x54\x92\xd4\x68\x49\xbb\x25\x84\xc1\xc9\x6f\x81\x81\xc8\xaa\xba\x50\xe5\x7d\x25\x93\xf5\x2c\x3e\x11\x25\x39\x07\xfa\x75\xd7\xe0\xd8\x76\x03\xa7\xb5\x5c\xd0\x94\xcb\x98\x64\x9b\x8e\xcb\xf6\x78\xb3\x63\xed\x78\x65\x6e\x8e\xbd\xf2\xb6\xee\xd9\x97\x52\xcc\x7b\x3f\xb1\xad\xc2\x2d\x3b\xbd\x53\x39\x7e\x54\x8c\xf6\xd1\x67\x45\x58\x05\xcc\xfc\xfc\xef\x6e\xdb\x90\xca\x34\x64\x89\xd1\x89\x91\x89\xe9\x32\xdb\xd0\x44\xf2\x34\x12\x3b\x83\x86\xf9\x4f\x73\xfc\x09\xfb\xc0\xfb\x2a\x4b\x2b\xcc\xcd\x17\x8c\xf1\xa2\x1d\xca\x8b\x75\x3f\xa7\x91\x6f\x5b\x83\x28\x8b\xdc\xc2\xfc\x48\x01\xb2\xfc\xd5\x6a\x19\xff\x83\xb5\xc6\xc4\xb4\xe9\xb5\xf4\x35\x78\x0e\x33\x7d\x02\x7f\xc1\xde\x51\x70\xb1\xa7\x69\x91\xe7\xa7\x2f\x7e\x12\xe0\x66\x45\x7c\x06\xa3\x4d\x71\x7e\xb7\x24\xd7\xe5\x74\x71\x92\x5f\x4d\xf0\xcf\xd9\xc9\xc9\x70\xf4\xde\xc5\xf1\xef\xa9\xf7\xf2\x60\xe9\xaa\xe4\x6e\x9b\xe3\x6b\x92\xfb\x03\xd6\x03\x52\xfb\xdb\x81\xa9\x9d\x9a\xec\x5c\x99\xd8\x6d\x53\x7c\x4d\x62\xff\xc4\xc4\x7c\x38\x62\x7f\x37\x30\xb1\x67\xe7\xe5\x7d\x73\xd3\xab\x74\x6d\x13\x66\x25\xdd\x4b\x9b\x9c\xea\xf9\x4f\xaf\x1d\xce\xee\x26\xe6\xa2\x06\x67\xef\x16\x66\x91\xf5\xdd\xa4\x7e\x07\x63\xd1\x15\xb5\x9c\xb2\x48\x0a\xfc\xbe\xd7\x23\x15\x9d\x1f\xd2\x3f\x4a\x47\xcb\xd1\x68\x64\xd1\xbe\xbe\x9a\xaf\xd9\xc5\x9b\xf3\xac\xb0\x48\x88\x62\xb1\xb6\x3f\x4f\x7e\x0a\xe5\x72\x67\xbf\x2d\x41\xe7\x87\xfa\x04\x31\x56\x58\xcb\xde\x1a\x96\x42\x20\x6e\xa2\xb1\x32\x01\xdf\x75\xd8\x5c\x4a\x0b\x10\xd4\x0a\x6f\xea\x40\xa7\x02\x50\xc2\x7d\x69\xe8\x8c\x3a\x59\x74\xbd\x9e\x1c\xa0\xc0\x7e\xf2\x65\x7a\x86\xac\xb2\x3b\xe5\xdc\xf4\x81\x61\x2e\x83\x0e\xba\x6a\x2b\x8e\x93\x71\xe5\xbf\x03\xbe\x05\x00\x00\xff\xff\x37\x48\xd6\x58\x51\x20\x00\x00"

func dataViewerUiBytes() ([]byte, error) {
	return bindataRead(
		_dataViewerUi,
		"data/viewer.ui",
	)
}

func dataViewerUi() (*asset, error) {
	bytes, err := dataViewerUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/viewer.ui", size: 8273, mode: os.FileMode(436), modTime: time.Unix(1449751412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/about.ui": dataAboutUi,
	"data/transcript.ui": dataTranscriptUi,
	"data/viewer.ui": dataViewerUi,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"about.ui": &bintree{dataAboutUi, map[string]*bintree{}},
		"transcript.ui": &bintree{dataTranscriptUi, map[string]*bintree{}},
		"viewer.ui": &bintree{dataViewerUi, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

