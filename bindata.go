// Code generated by go-bindata.
// sources:
// data/about.ui
// data/transcript.ui
// data/viewer.ui
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAboutUi = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xc1\x6e\xd4\x40\x0c\x86\xef\x7d\x0a\xcb\x57\x94\x4c\xd2\x0a\x09\xa1\x24\x55\xb5\x5d\x22\xb4\xa5\x20\x58\x10\xb7\x68\x32\x71\x13\x93\x64\x26\xcc\x4c\xda\xe6\x91\x78\x0d\x9e\x8c\xd9\x76\x57\x70\x40\x84\x5b\xec\xf8\xff\xec\xb1\xff\xec\xf2\x71\x1c\xe0\x9e\xac\x63\xa3\x73\x4c\xe3\x04\x81\xb4\x32\x0d\xeb\x36\xc7\xcf\xfb\x37\xd1\x2b\xbc\x2c\xce\x32\xd6\x9e\xec\x9d\x54\x54\x9c\x01\x64\x96\xbe\xcf\x6c\xc9\xc1\xc0\x75\x8e\xad\xef\x5f\xe0\x6f\xc6\x45\x9c\x9e\xa3\x78\xaa\x33\xf5\x37\x52\x1e\xd4\x20\x9d\xcb\xb1\xf4\xfd\x55\x6d\x66\x7f\xcd\x72\x30\x2d\x02\x37\x39\xca\x43\x22\x6a\x9e\x33\x07\x4d\x50\x4d\xd6\x4c\x64\xfd\x02\x5a\x8e\x94\xe3\x3d\x3b\xae\x07\xc2\x62\x6f\x67\xca\xc4\xe9\xef\xdf\x8b\x03\xc6\x44\xac\x8c\x8e\x0e\x31\x16\x8f\xbd\x6a\xa2\x30\xe0\x9a\x2e\x84\xad\x95\xe3\x51\xf5\x75\xb7\xb9\x86\x2f\x4c\x0f\x64\xd7\x84\xc7\x67\x63\x91\xc4\xe9\x5a\xad\x32\xe3\x48\xda\x3b\x2c\xae\xc0\xf1\x38\x0d\x04\x4f\x9d\x42\x9e\x15\x58\x92\x0d\x59\xb8\x33\x16\xca\xdb\xf7\xef\xb6\x6b\xb4\x07\xaa\x1d\xfb\x30\x6d\xe7\xfd\xe4\x5e\x0b\xd1\xb2\xef\xe6\x3a\x0e\x34\x61\x7b\x43\x2e\x5c\xcc\x89\xff\x5d\x80\x32\xd3\x62\xb9\xed\x3c\x16\x9b\xd3\x27\xfc\xfc\x01\xe7\x49\xfa\x12\x3e\x2e\x52\xc3\xee\x88\x5c\x3d\x01\x2b\xd2\x8e\x22\xbf\x4c\x61\xb8\x72\xbf\xab\x6e\xde\x6e\xb6\xb7\x9f\xb6\x55\xf9\xe1\xa6\xba\xa8\x92\x35\x80\x9c\x7d\x67\x6c\xd8\xd2\x3f\xda\x66\xe2\xd9\x5b\xc1\x9a\xe2\x0f\x6f\xfe\x0a\x00\x00\xff\xff\xa1\x46\xe8\x98\xcf\x02\x00\x00"

func dataAboutUiBytes() ([]byte, error) {
	return bindataRead(
		_dataAboutUi,
		"data/about.ui",
	)
}

func dataAboutUi() (*asset, error) {
	bytes, err := dataAboutUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/about.ui", size: 719, mode: os.FileMode(436), modTime: time.Unix(1449775770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTranscriptUi = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\xdd\x8e\xd3\x30\x10\x85\xef\xf7\x29\xac\xb9\x45\xde\xb4\x80\x10\x17\x49\x56\x42\x68\x79\x00\x0a\x5c\x3b\xf6\x6c\x32\xac\x63\x87\xb1\xd3\x94\xb7\x27\xfd\x23\xa1\x35\xea\xcf\xe5\xe4\x9c\x6f\x9c\x73\x1c\x25\x7f\xda\xb4\x56\xac\x91\x03\x79\x57\xc0\xf2\x71\x01\x02\x9d\xf6\x86\x5c\x5d\xc0\xb7\xd5\xb3\xfc\x08\x4f\xe5\x43\x4e\x2e\x22\xbf\x28\x8d\xe5\x83\x10\x39\xe3\xaf\x9e\x18\x83\xb0\x54\x15\x50\xc7\xd7\x37\x30\xed\x78\xf7\xb8\x7c\x0b\xd9\xce\xe7\xab\x9f\xa8\xa3\xd0\x56\x85\x50\xc0\x97\xf8\xfa\x99\x94\xf5\x35\x08\x32\x05\x44\x56\x2e\x68\xa6\x2e\x4a\xb3\x7f\xbc\x65\x46\xaa\x63\xdf\x21\xc7\xdf\xc2\xa9\x16\x0b\x58\x53\xa0\xca\x22\x94\x2b\xee\x31\xcf\x8e\x6a\xda\x1c\x29\xee\xad\xc7\xdd\x97\x80\x3e\xa0\x6c\x50\x19\x64\x59\x29\x86\x72\x79\x09\x30\xf8\xa2\x7a\x1b\x47\x88\xea\x26\x42\xf9\x7e\xb1\xb8\x16\x19\xc8\xc4\x06\xca\x0f\x09\x42\x37\x64\x8d\xd8\xb5\xec\x94\x95\xbb\x71\x8c\x5e\xf9\xcd\xa1\x95\x54\x9b\x9f\x66\xea\x8d\xbd\xa5\x80\xc6\xb7\xbe\x46\x87\xbe\x0f\xd7\x43\x95\xe7\x6d\x77\x87\x68\x67\xc1\xa6\x70\xd3\x9c\x8a\xf2\x55\xb3\xb7\x16\xcd\x0f\x72\xc6\x0f\x30\x37\xdf\x91\x2c\x7d\x6a\xfa\xe4\x15\x6e\xe2\x77\xc2\xe1\xf0\x51\x8e\x93\x5c\x6f\xc7\x53\xf2\xce\xd7\x48\x81\xba\xe7\xe0\x59\xfe\xe5\x9f\x95\x0d\x37\x2d\x40\x43\x51\xdd\x87\x0e\xac\x3a\xd9\x7a\x33\xb2\xc3\x78\x75\xff\x47\xf3\x6c\x5f\xd5\x49\xab\xd9\xf9\x65\x9e\x19\x4f\x4c\xff\x1a\x66\xe2\x24\xe4\xd9\xec\x07\xf3\x27\x00\x00\xff\xff\xd1\x52\xa5\x53\x94\x04\x00\x00"

func dataTranscriptUiBytes() ([]byte, error) {
	return bindataRead(
		_dataTranscriptUi,
		"data/transcript.ui",
	)
}

func dataTranscriptUi() (*asset, error) {
	bytes, err := dataTranscriptUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/transcript.ui", size: 1172, mode: os.FileMode(436), modTime: time.Unix(1449751760, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataViewerUi = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x51\x73\xe2\x36\x10\x7e\xcf\xaf\xf0\xe8\xb5\x63\x48\xee\x66\x6e\xee\x01\x7c\xd3\x5c\xa6\x69\xa7\xd7\x9b\x4c\x93\xf6\xfa\xd6\x91\xa5\xc5\x56\x91\x25\x57\x96\x21\xf4\xd7\x57\xb2\x1d\xc0\x41\x3e\x8c\xc1\x49\x08\x79\x43\x66\x3f\x69\xf7\xdb\x6f\x65\x49\xd6\xe8\xd3\x7d\xc2\xbd\x19\xa8\x8c\x49\x31\x46\x17\x83\x73\xe4\x81\x20\x92\x32\x11\x8d\xd1\x1f\x77\x3f\xf9\x1f\xd1\xa7\xe0\x6c\xc4\x84\x06\x35\xc1\x04\x82\x33\xcf\x1b\x29\xf8\x37\x67\x0a\x32\x8f\xb3\x70\x8c\x22\x3d\xfd\x01\xad\xfa\x78\x3f\xb8\x78\x87\x86\x85\x9d\x0c\xff\x01\xa2\x3d\xc2\x71\x96\x8d\xd1\xb5\x9e\x7e\x63\x82\xca\x39\xf2\x18\x1d\xa3\x19\x83\x39\x28\x7f\x5e\x3e\xb2\xf6\x06\x91\x2a\x99\x82\xd2\x0b\x4f\xe0\x04\xac\x4d\xc6\x42\x0e\x28\xb8\x53\x39\x8c\x86\x0f\xff\xba\x8d\x29\x4c\x70\xce\xb5\x1f\x03\x8b\x62\x8d\x82\x0f\xe7\xe7\x6d\x21\x73\x46\x75\x8c\x82\x8f\x0e\x04\x89\x19\xa7\x9e\x5e\xa4\xc6\x5c\x33\xcd\x21\xc4\xaa\xf2\xd6\x15\xe1\xcf\x80\x29\xa8\x4b\x63\x53\x04\x19\x17\xcd\xa5\xfd\x8e\x11\xba\x00\x59\x2c\xe7\x3e\xe1\x32\x03\x3f\xcc\xb5\x96\xa2\x3d\xb4\x70\x1f\x05\x7f\xfd\xfa\xf9\xca\xfb\xb3\x60\xdf\x89\x2a\x22\x5e\xb5\x5d\x51\x5e\xca\x7b\xb4\x6e\xd1\x21\x2e\x17\x48\x2a\x06\x42\x63\xcd\x6c\x54\xb1\x69\xfd\x27\x4d\x93\xb7\x85\xc7\x32\x91\x11\x08\x90\x79\xb6\x65\xdc\x4c\x2f\x38\xd4\x9f\xd9\xc0\x6d\x7c\x55\x5f\x9c\x89\x29\xd0\x52\xc7\x6b\x26\x43\x07\x72\x93\xb0\x06\xd2\xca\x74\x15\xba\x48\x15\xcc\x58\xe1\xe7\x23\x58\x47\x26\xcb\xa8\x58\x24\x30\xaf\x60\x84\x33\x62\x23\xf0\x62\x2c\x28\x07\x35\x46\x37\xd5\x98\x9f\x65\xc2\xc8\xe3\xc8\x9a\x69\xd9\xa0\x86\x25\x38\x5a\x8a\xcf\xd5\x8d\x8b\xa4\x66\xa2\xdc\x64\xfd\x62\x07\x71\xb0\xb3\x17\x43\x2e\x30\x23\x52\xf8\xf6\x27\x0a\x22\xe9\x3f\xe4\xc5\xcf\x16\x49\x28\x0d\x85\xdf\xef\x6e\x34\x2c\x1d\x77\x91\xe0\x56\x85\x13\xe0\x34\xee\x22\x2b\x01\xf7\xfa\x29\x25\xf5\xd5\x8c\xf7\x26\xa7\x66\x39\xd9\x7c\x3c\xbb\x94\x36\x0d\x37\x8c\x5a\xcd\xf9\x6b\x3a\x53\x46\x00\x32\x39\xc8\x2b\x60\x8b\xc2\x7e\x2f\x46\x72\x6a\xac\xc5\x2c\xfe\x3d\x6d\xed\x35\x97\x37\xe9\xa9\x7b\xa5\x35\xeb\x28\x01\xca\xb0\x9f\x72\xbc\xe0\x2c\x33\x72\x8a\xf3\xc9\x84\x43\x0b\x59\x3d\xb5\x42\x7e\x03\x91\xaf\xab\x24\x31\xed\xe5\x22\xe5\xf0\xab\x85\xdc\x2c\x81\x52\x99\xca\x99\x5d\x60\xed\x02\x5c\x82\x0a\x07\xab\xd6\x1e\x6b\x85\x57\xa1\x32\xf3\x5c\xf8\x05\x21\xbd\x0a\xcb\xfa\x80\xc9\xd4\x6c\x2f\xb6\xe4\xc8\x18\xf9\x76\xd5\x8d\x02\x10\xd4\xed\x8a\x79\xfa\xb8\xab\x83\xe8\x96\x82\xc6\x8c\x67\x2f\x5a\xba\x0f\x3e\xbe\xa9\xb7\x50\x2f\x95\x24\x37\xe2\xd5\x7e\x65\xc2\xa0\xcd\x12\xee\x95\xeb\x38\x03\xac\x48\xfc\xa2\x65\x5c\xb9\xf8\xa6\xe2\x42\xc5\xe6\x45\xaf\xfd\x09\x13\xf4\x35\x69\xb7\x3e\x7e\xed\xcf\x7a\x0e\x36\xb9\xbf\x25\x4a\x72\x0e\xf4\xdb\xfa\x19\x51\x27\xf2\xdb\x94\x4f\x99\xe9\xa2\x72\x88\x5d\x6f\xfa\xcc\x91\xfa\x0e\x69\xdf\xba\xba\x6a\x64\x68\xfd\x8f\x4d\x7f\x6f\xaa\x22\xaa\xbd\xb3\x96\x95\x75\xb6\xb3\xb7\xdb\xb2\x71\xad\x18\x3d\xe4\x49\x56\x82\x55\xc4\xcc\xbc\x74\xb1\x71\xe8\xe6\xb2\x56\x72\xee\x67\x46\x6b\x46\x6a\x28\xf8\xd0\x06\x41\x24\xcf\x13\xb1\x02\x35\x8c\xd3\x42\x19\x5f\x70\x08\xbc\x8f\x09\xf4\x1e\x73\xb3\xfd\x31\xae\xb5\x05\xf0\xd2\x93\xaf\x79\x12\xee\x35\x5d\x52\x96\xf8\x65\x5f\xdb\xe7\xca\xee\x13\x88\x96\xe9\xdf\x58\x6b\x4c\x62\x14\x38\xc9\x77\x86\x08\x13\xbd\x0d\x75\xa8\x37\x66\x99\xd8\x5a\x01\x89\x82\xda\x3e\x92\x9d\x01\x37\xa3\xe3\xce\x22\x69\xe4\xe2\xf9\xd2\xd3\xa0\xdb\xc3\xa6\xe7\x05\xd5\xdd\x9d\x3d\x41\x3f\xaa\xb2\x6b\x1f\xe1\xf3\x96\x5d\xf5\x6d\xe2\xc4\xaa\xae\x5b\x76\x4e\xad\xea\xae\xb0\x3e\xae\xa2\x7b\x77\x24\x45\x47\x0d\xb1\x27\x57\x73\xdd\x92\x73\x6a\x35\xf7\x85\x89\xe9\x51\xd5\xdc\xfb\x23\xa9\x39\xfb\x61\xb9\xcf\x44\xf7\x5a\x3b\xdd\x48\xee\x5c\x3b\x87\xd8\x18\xaf\x9f\xf1\xf7\xb1\x2b\xae\x5f\x85\xd8\x7b\x53\x5c\xbb\x02\x31\xb3\x27\x99\xc4\x7d\x01\x62\xc7\xdd\x74\x9b\xe3\x43\x49\x81\x5f\xf6\x76\x58\xa8\x8b\x6f\xd3\xd7\xd2\xd3\x72\x30\x18\x74\x3c\x2a\x79\x41\x91\xd8\x1b\x34\xde\x9d\xc2\x22\x23\x8a\xa5\xba\xeb\x07\xce\xdb\x58\xce\x57\xbd\xd4\xa7\xcb\x63\xa2\xe3\x66\x79\xf0\xbe\x0f\x13\xab\x5e\x7a\x61\xe2\x16\x52\xac\xb0\x96\xbd\xec\xef\xcb\x0a\xf4\x33\x8d\x95\xe1\xe3\xa2\xf5\x3a\xa3\xc2\x81\xa0\x1d\x50\x66\x76\xde\x61\x5a\xae\x40\xa1\x34\x5a\x48\x76\xc0\xed\x74\x31\xeb\x98\x54\xfb\x63\x28\xf3\xce\xa5\x6b\xaf\xe2\x15\x1d\x5c\x31\xcc\x65\xb4\xa3\x62\x5b\xbc\xdc\x46\xc3\xb5\x7b\x97\xff\x07\x00\x00\xff\xff\xf7\xc4\x15\x1a\xab\x29\x00\x00"

func dataViewerUiBytes() ([]byte, error) {
	return bindataRead(
		_dataViewerUi,
		"data/viewer.ui",
	)
}

func dataViewerUi() (*asset, error) {
	bytes, err := dataViewerUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/viewer.ui", size: 10667, mode: os.FileMode(436), modTime: time.Unix(1449779583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/about.ui": dataAboutUi,
	"data/transcript.ui": dataTranscriptUi,
	"data/viewer.ui": dataViewerUi,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"about.ui": &bintree{dataAboutUi, map[string]*bintree{}},
		"transcript.ui": &bintree{dataTranscriptUi, map[string]*bintree{}},
		"viewer.ui": &bintree{dataViewerUi, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

