// Code generated by go-bindata.
// sources:
// data/about.ui
// data/transcript.ui
// data/viewer.ui
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAboutUi = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xd1\x6e\xd4\x30\x10\x7c\x6e\xbf\x62\xb5\xaf\x28\x71\xd2\x0a\x09\xa1\x24\x55\x75\x3d\x22\x74\xa5\x20\x38\x10\x6f\x91\xe3\x6c\x93\x25\x89\x1d\x6c\xa7\x6d\x3e\x89\xdf\xe0\xcb\xf0\xd1\x9e\xe0\x01\xd2\x37\xef\x7a\x66\x76\x34\x9a\xec\xe2\x61\x1c\xe0\x8e\xac\x63\xa3\x73\x4c\xe3\x04\x81\xb4\x32\x0d\xeb\x36\xc7\xcf\xfb\x37\xd1\x2b\xbc\x28\x4e\x33\xd6\x9e\xec\xad\x54\x54\x9c\x9e\x64\x96\xbe\xcf\x6c\xc9\xc1\xc0\x75\x8e\xad\xef\x5f\xe0\x1f\x89\xf3\x38\x3d\x43\x71\x80\x99\xfa\x1b\x29\x0f\x6a\x90\xce\xe5\x58\xfa\xfe\xb2\x36\xb3\xbf\x62\x39\x98\x16\x81\x9b\x1c\xe5\x61\x11\x35\x8f\x9b\x40\x39\xc9\x26\x6b\x26\xb2\x7e\x01\x2d\x47\xca\xf1\x8e\x1d\xd7\x03\x61\xb1\xb7\x33\x65\xe2\xf8\xfb\x2f\x68\x18\x5b\x2b\xc7\xe8\x30\x61\xf1\x75\xb7\xb9\x82\x2f\x4c\xf7\x64\xd7\x69\x4f\xbe\xb1\x48\xe2\x74\x1d\xa9\xcc\x38\x92\xf6\x0e\x8b\x4b\x70\x3c\x4e\x03\xc1\xef\x2b\x61\xcf\x0a\x2c\xc9\x86\x2c\xdc\x1a\x0b\xe5\xcd\xfb\x77\xdb\x75\xad\x7b\xaa\x1d\xfb\xe0\xb3\xf3\x7e\x72\xaf\x85\x68\xd9\x77\x73\x1d\x07\x2d\x61\x7b\x43\x2e\xa4\xed\xc4\x43\xaf\x9a\x28\xc4\xfb\x9c\xaf\x69\xb1\xdc\x76\x1e\x8b\xcd\xf1\x09\x3f\x7f\xc0\x59\x92\xbe\x84\x8f\x8b\xd4\xb0\x7b\x12\x5c\xd7\x19\x58\x91\x76\x14\xf9\x65\x0a\xc6\xca\xfd\xae\xba\x7e\xbb\xd9\xde\x7c\xda\x56\xe5\x87\xeb\xea\xbc\x4a\xd6\xe9\x72\xf6\x9d\xb1\x21\x9d\xff\x9f\xcc\xc4\x63\x25\x42\x9f\xc4\x5f\x85\xfa\x15\x00\x00\xff\xff\x09\xdf\x2c\x94\x84\x02\x00\x00")

func dataAboutUiBytes() ([]byte, error) {
	return bindataRead(
		_dataAboutUi,
		"data/about.ui",
	)
}

func dataAboutUi() (*asset, error) {
	bytes, err := dataAboutUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/about.ui", size: 644, mode: os.FileMode(436), modTime: time.Unix(1449748851, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTranscriptUi = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\xcf\x8e\x9b\x30\x10\xc6\xcf\xc9\x53\x20\x5f\x2b\x07\xd2\x56\x55\x0f\x40\xa4\xaa\x4a\x1f\xa0\x69\xf7\x6c\xec\x09\xcc\xc6\xd8\xec\xd8\x84\xec\xdb\x2f\x81\xfc\x5d\x50\x14\x6e\xcc\x7c\xdf\xcf\xe3\xf9\x80\x78\x75\x28\x75\xb0\x07\x72\x68\x4d\xc2\x96\x8b\x88\x05\x60\xa4\x55\x68\xf2\x84\xfd\xdb\xac\xf9\x4f\xb6\x4a\xe7\x31\x1a\x0f\xb4\x15\x12\xd2\xf9\x2c\x26\x78\xab\x91\xc0\x05\x1a\xb3\x84\xe5\x7e\xf7\x85\x5d\x8f\xf8\xb6\x58\x7e\x65\xe1\xd1\x66\xb3\x57\x90\x3e\x90\x5a\x38\x97\xb0\x3f\x7e\xf7\x1b\x85\xb6\x39\x0b\x50\x25\xcc\x93\x30\x4e\x12\x56\x9e\xab\xbe\xdd\x22\xb3\xb8\x22\x5b\x01\xf9\xf7\xc0\x88\x12\x12\xb6\x47\x87\x99\x06\x96\x6e\xa8\x86\x38\x3c\xab\x63\x56\x8f\xbe\x37\x9e\xcf\x7d\x6c\xaf\x1d\xf0\x02\x84\x02\xe2\x99\x20\x96\x2e\x1f\xdb\x15\x6c\x45\xad\x7d\x8b\x60\x5e\x78\x96\x7e\x8f\xa2\xe7\x80\x06\x95\x2f\x58\xfa\x63\xe0\x97\x05\x6a\x15\x74\xb9\x1a\xa1\x79\x57\xb6\x0b\x67\xf6\xd0\x25\x31\x12\xdf\xaf\xb3\x34\x25\xa6\xa1\xb9\xb0\xa5\xcd\xc1\x80\xad\xdd\x73\x40\x66\xe9\x18\xd3\x69\x93\x68\x60\xef\xae\xde\x3f\x8f\xdc\xfa\xaf\x24\xab\x35\xa8\x17\x34\xca\x36\xa7\x05\x26\xae\xf0\x69\xc8\xd8\x98\x0d\x1c\xfc\x7f\x84\xe6\xf4\x75\xb5\x15\xdf\x1f\xcb\x0b\x32\x75\xe2\x10\x90\x35\x39\x4b\xfc\xc2\xad\x85\x76\x4f\x81\xa0\xd0\x8b\x69\x48\x43\xa2\xe2\xa5\x55\x2d\xd3\xb4\xf1\x8f\x20\x71\xd8\x67\x70\x49\x28\xbc\x7b\x0f\x77\xea\xad\x76\xab\x5c\xfb\xd7\x6e\x1c\xde\xfc\xeb\x1f\x01\x00\x00\xff\xff\x34\x5d\xdc\xc7\x1f\x04\x00\x00")

func dataTranscriptUiBytes() ([]byte, error) {
	return bindataRead(
		_dataTranscriptUi,
		"data/transcript.ui",
	)
}

func dataTranscriptUi() (*asset, error) {
	bytes, err := dataTranscriptUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/transcript.ui", size: 1055, mode: os.FileMode(436), modTime: time.Unix(1449749798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataViewerUi = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x5a\x4d\x8f\xdb\x36\x10\x3d\x67\x7f\x85\xa0\x6b\xa1\x78\x37\x01\x8a\x1c\x6c\x05\xdd\x2c\xba\x2d\x9a\x06\x41\x77\xdb\xf4\x56\x50\xe4\x58\x62\x4d\x71\x54\x8a\xf2\x47\x7f\x7d\xa8\x0f\xdb\xb2\x25\xdb\xa2\xad\x4d\x04\xdf\x4c\xf1\x0d\x39\x33\xef\x89\xd4\x90\x1e\xbf\x5f\xc6\xc2\x99\x83\x4a\x39\xca\x89\x7b\xf7\xfa\xd6\x75\x40\x52\x64\x5c\x86\x13\xf7\xcf\xe7\x9f\xbd\x77\xee\x7b\xff\x66\xcc\xa5\x06\x35\x25\x14\xfc\x1b\xc7\x19\x2b\xf8\x2f\xe3\x0a\x52\x47\xf0\x60\xe2\x86\x7a\xf6\x83\xbb\x1d\xe3\xed\xeb\xbb\x37\xee\xc8\xbf\x79\x35\xc6\xe0\x5f\xa0\xda\xa1\x82\xa4\xe9\xc4\x7d\xd4\xb3\x2f\x5c\x32\x5c\xb8\x0e\x67\x13\x77\xce\x61\x01\xca\x5b\x94\x8f\x0c\xfc\xd5\x38\x51\x98\x80\xd2\x2b\x47\x92\x18\x72\x44\xca\x03\x01\xae\xff\xac\x32\x18\x8f\xd6\xbd\x6d\x50\x06\x53\x92\x09\xed\x45\xc0\xc3\x48\xbb\xfe\x8f\xb7\xb7\xdd\x0c\x16\x9c\xe9\xc8\xf5\xdf\x35\xf0\x34\xe2\x82\x39\x7a\x95\x18\xb0\xe6\x5a\x40\x40\x54\xe1\x65\x4b\x58\xbf\x00\x61\xa0\xee\x0d\xa0\x88\x2c\x2a\x9a\x25\xd8\x26\xa8\x26\x38\x8d\x70\xe1\x51\x81\x29\x78\x41\xa6\x35\xca\x6e\x66\x85\xbf\xae\xff\xf7\x6f\x1f\x1e\x9c\xbf\x8a\x34\x37\x2c\x8a\xf0\xca\xdf\x2d\x01\xdd\xe3\xb2\x72\xdf\x32\x80\x26\x1c\x15\x07\xa9\x89\xe6\xb9\xf3\x91\x69\xfd\x8f\xa6\x29\x4e\x1b\x46\x18\x63\x08\x12\x30\x4b\x0f\xce\x95\xea\x95\x80\x75\xcb\x04\x95\x07\x50\x99\x0b\x2e\x67\xc0\x0a\x1d\x96\x9d\xa3\x1d\xf0\x4e\x02\x5a\x53\x50\xe6\xbb\x20\x34\x51\x30\xe7\x85\x1f\x6b\xbc\x6d\x56\x72\x5f\x79\x28\x89\xa8\xe0\x54\x70\x9a\xbb\xe7\x44\x44\x32\x01\x6a\xe2\x7e\xae\xe6\xf8\x80\x31\xa7\x5b\xb7\x1b\x41\xee\x85\xc9\x63\x12\x6e\xc4\x51\xb7\x1a\xed\x99\xed\x05\xdc\x16\xf2\xaf\xf9\x58\xb5\x18\xcf\x88\xb2\x69\xc2\x29\x4a\x2f\xff\xe9\xfa\x21\x7a\xeb\x4c\x7a\xe9\x2a\x0e\xd0\x24\xa1\x75\x90\xf1\xa8\xf4\xad\x1e\xce\x1e\x5f\x7b\x88\xbd\x7e\x2b\x76\x25\x2c\xf5\x4b\x32\xfb\xc9\x8c\x7f\xdd\xac\xe6\x19\x7c\x59\x46\x77\x7b\x77\xfa\x4e\x2d\x65\x35\xa6\x95\xa1\x04\xe3\xb3\x57\xb6\x13\x3c\xff\x51\x8c\xbe\xc7\xf4\xb1\x25\xaa\x9d\x65\xdb\x85\x6a\x9f\x5f\x7b\xfd\x1e\xe6\x36\x06\xc6\x89\x97\x08\xb2\x12\x3c\x35\x14\x47\xd9\x74\x2a\xe0\x18\xd5\x2f\x45\xe3\xef\x20\xb3\x3a\x95\xb1\x69\x6f\xf6\xc4\x7e\x76\xaa\xcc\xec\xb2\x09\x26\x38\xcf\xf7\xee\x6e\x26\x1b\x78\xe1\x4e\xd5\xb2\xdb\xa7\x86\x2f\x02\xf3\x5c\x7a\x45\x80\x3d\xf1\x6e\x26\x23\x74\x66\x3e\x30\x0f\xa6\xd5\x74\x7b\xf9\xa7\x97\xeb\x83\x64\x8d\xd9\xcc\x83\xba\xfd\x25\x32\x62\xa0\x09\x17\xe9\x80\x94\xb4\xf6\xe8\x4a\xc5\xc4\x90\x66\x46\x4b\xda\xab\x20\x1c\x8e\x7e\x0b\x0c\x44\x56\xf5\x89\x6a\xcf\x6b\x99\x6c\x66\xf1\x89\x2a\x14\x02\xd8\x97\x6d\x81\x63\x5b\x0d\x1c\xd7\x72\x49\x53\x21\x63\x9a\x6f\x3a\x1e\xdf\xe1\xcd\x8e\xb5\xc3\x2b\x73\x7b\xec\xb5\xa7\x4d\xcf\x3e\x57\x62\xde\x79\xc5\x36\x0a\xb7\xac\xf4\x8e\xe5\xf8\x51\x71\xd6\x47\x9d\x15\x13\x15\x72\xf3\xfa\xdf\xdd\x9e\x42\x2a\x53\x90\xa5\x46\x27\x46\x26\xa6\xca\x3c\x85\xa6\x28\xb2\x58\x6e\x0d\x5a\xc6\x3f\xce\xf1\x47\x12\x80\xe8\x6b\x59\x5a\x12\x61\xbe\x60\x8c\x17\xa7\xa1\xa2\x9c\xf7\x53\x16\x07\xb6\x6b\x10\xe3\xb1\x57\x9a\x1f\x58\x80\x2c\xdf\x5a\x8d\xc9\x3f\x44\x6b\x42\x4d\x99\xde\x48\x5f\x8b\xe7\x30\xd5\x47\xf0\x17\xec\x1d\x25\x17\x3b\x9a\x96\x45\x7e\xfa\xe2\x27\x05\x61\x66\x24\x67\x30\xda\x16\xe7\x37\x4b\x72\x53\x4e\x17\x27\xf9\xbb\x09\xfe\x39\x3f\x39\x19\x8e\xde\xbb\x38\xfe\x2d\xf5\x5e\x1d\x2c\x5d\x95\xdc\x6d\x73\x7c\x4d\x72\x7f\x20\x7a\x40\x6a\x7f\x33\x30\xb5\x33\x93\x9d\x2b\x13\xbb\x6d\x8a\xaf\x49\xec\x1f\xb9\x9c\x0d\x47\xec\x6f\x07\x26\xf6\xfc\xbc\xbc\x6f\x6e\x7a\x95\xae\x6d\xc2\xac\xa4\x7b\x69\x91\x53\x3f\xff\xe9\xb5\xc2\xd9\xde\xc4\x5c\x54\xe0\xec\xdc\xc2\xcc\xf3\xba\x9b\x36\xef\x60\x2c\xaa\xa2\x13\xa7\x2c\xc8\x40\xdc\xf7\x7a\xa4\xa2\x8b\x43\xfa\x47\x74\x34\x5a\xd4\xae\xdf\xcd\xd1\xfc\xd6\xcd\x79\x56\x44\xa6\x54\xf1\x44\xdb\x1f\x26\x3f\x45\xb8\xd8\xda\x6f\xd6\x9f\xf3\x43\x7d\x82\x84\x28\xa2\xb1\xb7\x6a\xa5\x54\x87\x97\x6a\xa2\x4c\xc0\x77\x1d\x76\x96\xca\x02\x24\xb3\xc2\x9b\x45\xa0\xd3\xdb\x5f\xc1\x03\x34\x74\xc6\x9d\x2c\xba\xde\x4d\x0e\x50\x60\x3f\x05\x98\x9d\x21\xab\xfc\x42\xb9\x30\x7d\xe0\x44\x60\xd8\x41\x57\xa7\x56\xc6\xf1\xa8\xf6\xd7\x80\xaf\x01\x00\x00\xff\xff\xee\xf5\xd4\x95\x4e\x20\x00\x00")

func dataViewerUiBytes() ([]byte, error) {
	return bindataRead(
		_dataViewerUi,
		"data/viewer.ui",
	)
}

func dataViewerUi() (*asset, error) {
	bytes, err := dataViewerUiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/viewer.ui", size: 8270, mode: os.FileMode(436), modTime: time.Unix(1449748877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/about.ui": dataAboutUi,
	"data/transcript.ui": dataTranscriptUi,
	"data/viewer.ui": dataViewerUi,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"about.ui": &bintree{dataAboutUi, map[string]*bintree{}},
		"transcript.ui": &bintree{dataTranscriptUi, map[string]*bintree{}},
		"viewer.ui": &bintree{dataViewerUi, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

